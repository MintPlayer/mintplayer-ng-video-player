import { AfterViewInit, DestroyRef, ElementRef, EventEmitter, NgZone, OnDestroy, StaticProvider } from '@angular/core';
import { PlayerProgress } from '@mintplayer/player-progress';
import { ApiLoader, ECapability, EPlayerState, IApiService } from '@mintplayer/player-provider';
import { VideoPlayer } from "@mintplayer/video-player";
import * as i0 from "@angular/core";
export declare function provideVideoApis(...platforms: ApiLoader[]): StaticProvider;
export declare class VideoPlayerComponent implements AfterViewInit, OnDestroy {
    private zone;
    private apis;
    private destroy;
    constructor(zone: NgZone, apis: Promise<IApiService[]>, destroy: DestroyRef);
    private zoneEmit;
    get width(): number;
    set width(value: number);
    get height(): number;
    set height(value: number);
    progressChange: EventEmitter<PlayerProgress>;
    set playerState(value: EPlayerState);
    playerStateChange: EventEmitter<EPlayerState>;
    getTitle(): Promise<string | null>;
    get volume(): number;
    set volume(value: number);
    volumeChange: EventEmitter<number>;
    get mute(): boolean;
    set mute(value: boolean);
    muteChange: EventEmitter<boolean>;
    get isFullscreen(): boolean;
    set isFullscreen(value: boolean);
    isFullscreenChange: EventEmitter<boolean>;
    get isPip(): boolean;
    set isPip(value: boolean);
    isPipChange: EventEmitter<boolean>;
    setIsPip(isPip: boolean): void;
    get autoplay(): boolean;
    set autoplay(value: boolean);
    get url(): string;
    set url(value: string);
    setUrl(url: string | null): void;
    capabilitiesChange: EventEmitter<ECapability[]>;
    container: ElementRef<HTMLDivElement>;
    player?: VideoPlayer;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<VideoPlayerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<VideoPlayerComponent, "video-player", never, { "width": { "alias": "width"; "required": false; }; "height": { "alias": "height"; "required": false; }; "playerState": { "alias": "playerState"; "required": false; }; "volume": { "alias": "volume"; "required": false; }; "mute": { "alias": "mute"; "required": false; }; "isFullscreen": { "alias": "isFullscreen"; "required": false; }; "isPip": { "alias": "isPip"; "required": false; }; "autoplay": { "alias": "autoplay"; "required": false; }; "url": { "alias": "url"; "required": false; }; }, { "progressChange": "progressChange"; "playerStateChange": "playerStateChange"; "volumeChange": "volumeChange"; "muteChange": "muteChange"; "isFullscreenChange": "isFullscreenChange"; "isPipChange": "isPipChange"; "capabilitiesChange": "capabilitiesChange"; }, never, never, true, never>;
}
